{"ast":null,"code":"const onSubmitForm = async e => {\n  e.preventDefault();\n  if (loginBtn === 'login') {\n    if (email && password) {\n      try {\n        const response = await axios.post(apiList.login, {\n          email,\n          password\n        });\n        Cookies.set(\"authToken\", response.data.token);\n        setErrorMsg(\"Login Successful\");\n        closeLoginModal();\n        // Clear input values\n        setEmail('');\n        setPassword('');\n      } catch (error) {\n        var _error$response, _error$response$data;\n        const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed. Please try again.';\n        setErrorMsg(message);\n      }\n    } else {\n      setErrorMsg('Please fill in all required fields.');\n    }\n  } else {\n    if (name && lastName && email && password) {\n      if (password.length >= 5 && password.length <= 8) {\n        try {\n          await axios.post(apiList.signup, {\n            email,\n            password,\n            name,\n            lastName\n          });\n          setErrorMsg('Registered successfully');\n          setLoginBtn('login');\n          // Clear input values\n          setName('');\n          setLastName('');\n          setEmail('');\n          setPassword('');\n        } catch (error) {\n          var _error$response2, _error$response2$data;\n          const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed. Please try again.';\n          setErrorMsg(message);\n        }\n      } else {\n        setErrorMsg('Password should be between 5 and 8 characters long.');\n      }\n    } else {\n      setErrorMsg('Please fill in all required fields.');\n    }\n  }\n};","map":{"version":3,"names":["onSubmitForm","e","preventDefault","loginBtn","email","password","response","axios","post","apiList","login","Cookies","set","data","token","setErrorMsg","closeLoginModal","setEmail","setPassword","error","_error$response","_error$response$data","message","name","lastName","length","signup","setLoginBtn","setName","setLastName","_error$response2","_error$response2$data"],"sources":["D:/synergy/SGU-Shop/client/src/Components/LoginModal/LoginModal.js"],"sourcesContent":["const onSubmitForm = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (loginBtn === 'login') {\r\n        if (email && password) {\r\n            try {\r\n                const response = await axios.post(apiList.login, { email, password });\r\n                Cookies.set(\"authToken\", response.data.token);\r\n                setErrorMsg(\"Login Successful\");\r\n                closeLoginModal();\r\n                // Clear input values\r\n                setEmail('');\r\n                setPassword('');\r\n            } catch (error) {\r\n                const message = error.response?.data?.message || 'Login failed. Please try again.';\r\n                setErrorMsg(message);\r\n            }\r\n        } else {\r\n            setErrorMsg('Please fill in all required fields.');\r\n        }\r\n    } else {\r\n        if (name && lastName && email && password) {\r\n            if (password.length >= 5 && password.length <= 8) {\r\n                try {\r\n                    await axios.post(apiList.signup, { email, password, name, lastName });\r\n                    setErrorMsg('Registered successfully');\r\n                    setLoginBtn('login');\r\n                    // Clear input values\r\n                    setName('');\r\n                    setLastName('');\r\n                    setEmail('');\r\n                    setPassword('');\r\n                } catch (error) {\r\n                    const message = error.response?.data?.message || 'Registration failed. Please try again.';\r\n                    setErrorMsg(message);\r\n                }\r\n            } else {\r\n                setErrorMsg('Password should be between 5 and 8 characters long.');\r\n            }\r\n        } else {\r\n            setErrorMsg('Please fill in all required fields.');\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAOC,CAAC,IAAK;EAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;EAElB,IAAIC,QAAQ,KAAK,OAAO,EAAE;IACtB,IAAIC,KAAK,IAAIC,QAAQ,EAAE;MACnB,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAACC,OAAO,CAACC,KAAK,EAAE;UAAEN,KAAK;UAAEC;QAAS,CAAC,CAAC;QACrEM,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEN,QAAQ,CAACO,IAAI,CAACC,KAAK,CAAC;QAC7CC,WAAW,CAAC,kBAAkB,CAAC;QAC/BC,eAAe,CAAC,CAAC;QACjB;QACAC,QAAQ,CAAC,EAAE,CAAC;QACZC,WAAW,CAAC,EAAE,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QAAA,IAAAC,eAAA,EAAAC,oBAAA;QACZ,MAAMC,OAAO,GAAG,EAAAF,eAAA,GAAAD,KAAK,CAACb,QAAQ,cAAAc,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBP,IAAI,cAAAQ,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAI,iCAAiC;QAClFP,WAAW,CAACO,OAAO,CAAC;MACxB;IACJ,CAAC,MAAM;MACHP,WAAW,CAAC,qCAAqC,CAAC;IACtD;EACJ,CAAC,MAAM;IACH,IAAIQ,IAAI,IAAIC,QAAQ,IAAIpB,KAAK,IAAIC,QAAQ,EAAE;MACvC,IAAIA,QAAQ,CAACoB,MAAM,IAAI,CAAC,IAAIpB,QAAQ,CAACoB,MAAM,IAAI,CAAC,EAAE;QAC9C,IAAI;UACA,MAAMlB,KAAK,CAACC,IAAI,CAACC,OAAO,CAACiB,MAAM,EAAE;YAAEtB,KAAK;YAAEC,QAAQ;YAAEkB,IAAI;YAAEC;UAAS,CAAC,CAAC;UACrET,WAAW,CAAC,yBAAyB,CAAC;UACtCY,WAAW,CAAC,OAAO,CAAC;UACpB;UACAC,OAAO,CAAC,EAAE,CAAC;UACXC,WAAW,CAAC,EAAE,CAAC;UACfZ,QAAQ,CAAC,EAAE,CAAC;UACZC,WAAW,CAAC,EAAE,CAAC;QACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;UAAA,IAAAW,gBAAA,EAAAC,qBAAA;UACZ,MAAMT,OAAO,GAAG,EAAAQ,gBAAA,GAAAX,KAAK,CAACb,QAAQ,cAAAwB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBjB,IAAI,cAAAkB,qBAAA,uBAApBA,qBAAA,CAAsBT,OAAO,KAAI,wCAAwC;UACzFP,WAAW,CAACO,OAAO,CAAC;QACxB;MACJ,CAAC,MAAM;QACHP,WAAW,CAAC,qDAAqD,CAAC;MACtE;IACJ,CAAC,MAAM;MACHA,WAAW,CAAC,qCAAqC,CAAC;IACtD;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}